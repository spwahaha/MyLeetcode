package LinkedLists;

public class Palindrome {
	
	public static boolean isPalindrome(ListNode head){
		ListNode slow = head;
		ListNode fast = head;
		Stack<Integer> stack = new Stack<Integer>();
		while(fast!=null && fast.next!=null){
			stack.push(slow.val);
			slow = slow.next;
			fast = fast.next;
		}
		
		if(fast!=null){
			slow = slow.next;
		}
		while(slow!=null){
			if(!stack.pop.equals(slow.val)){
				return false;
			}
			slow = slow.next;
		}
		return true;
	}
	
	
	
	
	
	private static ListNode reverseList(ListNode head){
		if(head == null || head.next == null){
			return head;
		}
		ListNode p = head.next;
		ListNode n = reverseList(p);
		p.next = head;
		head.next = null;
		return n;	
	}
}
